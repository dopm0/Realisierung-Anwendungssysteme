import asyncio
import asyncpg
from datetime import datetime, timedelta

# === Verbindung zur Datenbank ===
DB_USER = "master2025"
DB_PASS = "anwendungssysteme"
DB_HOST = "db.kaidro.de"
DB_PORT = "5432"
DB_NAME = "postgres"
DB_SCHEMA = "mw212_projekt"
TABLE_HISTORY = "electricity_price_history"

async def get_avg_daily_lowest_price_last_year():
    try:
        # Zeitraum berechnen
        today = datetime.today()
        one_year_ago = today - timedelta(days=365)

        # Verbindung zur Datenbank
        conn = await asyncpg.connect(
            user=DB_USER,
            password=DB_PASS,
            database=DB_NAME,
            host=DB_HOST,
            port=DB_PORT
        )

        await conn.execute(f"SET search_path TO {DB_SCHEMA};")

        # Query: Für jeden Tag den minimalen Preis, dann den Durchschnitt berechnen
        query = f"""
            SELECT AVG(daily_min) AS avg_daily_min_price
            FROM (
                SELECT DATE("timestamp") AS tag, MIN("price_euro") AS daily_min
                FROM {TABLE_HISTORY}
                WHERE "timestamp" BETWEEN $1 AND $2
                GROUP BY DATE("timestamp")
            ) t;
        """
        avg_lowest = await conn.fetchval(query, one_year_ago, today)

        await conn.close()
        return avg_lowest

    except Exception as e:
        print("Fehler beim Abrufen des durchschnittlichen Tages-Tiefstpreises:", e)
        return None

# Beispielaufruf
if __name__ == "__main__":
    result = asyncio.run(get_avg_daily_lowest_price_last_year())
    print(f"Durchschnittlicher Tages-Tiefstpreis im letzten Jahr: {result:.5f} €/MWh" if result else "Keine Daten verfügbar.")
